#include "/Engine/Public/Platform.ush"

Texture2D<float> InTex;
RWTexture2D<float> OutResult;
uint SrcWidth;
uint SrcHeight;
int IsCompress;

groupshared float3 Sum[8*8];


float3 unpack(float val)
{
	return float3((val/65536.0)%256.0, (val/ 256) %256.0, float(int(val) & 0x000000ff)) / 255.0;
}

// get Color from Tex, if use IsCompress, then range is [0, 1], otherwise range is [0,float_max]
float3 load(uint2 idx)
{
	if (idx.x >= SrcWidth || idx.y >= SrcHeight)
        return 0.0;
		
	if(IsCompress > 0)
	{
		
		return unpack(InTex[idx.xy].x);
	}
		
	
	return float3(InTex[idx.xy].x, 0, 0);
}

[numthreads(4, 4, 1)]
void main(uint GroupIndex : SV_GroupIndex
		, uint2 GroupID : SV_GroupID
		, uint2 GroupThreadID : SV_GroupThreadID
		, uint2 DispatchTreadID : SV_DispatchThreadID)
{
    
	uint2 local_id = GroupThreadID.xy;
	uint2 pixel_id = 4*DispatchTreadID.xy;
			
	Sum[(2*local_id.x + 0) + 8*(2*local_id.y + 0)] = load(pixel_id + uint2(0,0)) + load(pixel_id + uint2(0,1)) + load(pixel_id + uint2(1,0)) + load(pixel_id + uint2(1,1));
	Sum[(2*local_id.x + 1) + 8*(2*local_id.y + 0)] = load(pixel_id + uint2(2,0)) + load(pixel_id + uint2(2,1)) + load(pixel_id + uint2(3,0)) + load(pixel_id + uint2(3,1));
	Sum[(2*local_id.x + 0) + 8*(2*local_id.y + 1)] = load(pixel_id + uint2(0,2)) + load(pixel_id + uint2(0,3)) + load(pixel_id + uint2(1,2)) + load(pixel_id + uint2(1,3));
	Sum[(2*local_id.x + 1) + 8*(2*local_id.y + 1)] = load(pixel_id + uint2(2,2)) + load(pixel_id + uint2(2,3)) + load(pixel_id + uint2(3,2)) + load(pixel_id + uint2(3,3));
	
	
	for(uint isize = 4; isize > 0; isize /= 2) 
	{
        GroupMemoryBarrierWithGroupSync();

        // sum up in tiles
        if(local_id.x < isize && local_id.y < isize) 
		{
			Sum[local_id.x + 8*local_id.y] += Sum[isize + local_id.x+8*(local_id.y)];
            Sum[local_id.x + 8*local_id.y] += Sum[local_id.x+ 8*(isize + local_id.y)];
            Sum[local_id.x + 8*local_id.y] += Sum[isize + local_id.x+ 8*(isize + local_id.y)];
        }
    }
	
    if(local_id.x == 0 && local_id.y == 0) 
		OutResult[GroupID.xy] = Sum[0].x + Sum[0].y + Sum[0].z;

}