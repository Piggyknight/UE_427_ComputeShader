#include "/Engine/Public/Platform.ush"

Texture2D<float> SourceTexture;
RWBuffer<uint> SumResult;

float3 unpack(float val)
{
	return float3((val/65536.0)%256.0, (val/ 256) %256.0, float(int(val) & 0x000000ff)) / 255.0;
}

float next_pack(float x, float y, float z)
{
	int a = int(floor(x * 255)) << 16;
	int b = int(floor(y * 255)) << 8;
	int c = int(floor(z * 255));
	return float(a | b | c);
}


[numthreads(8, 8, 1)]
void main(uint GroupIndex : SV_GroupIndex
		, uint2 GroupID : SV_GroupID
		, uint2 GroupThreadID : SV_GroupThreadID
		, uint2 DispatchTreadID : SV_DispatchThreadID)
{
    
    uint2 Size;
    SourceTexture.GetDimensions(Size.x, Size.y);
    if (DispatchTreadID.x >= Size.x || DispatchTreadID.y >= Size.y)
        return;

	uint groupIndex = GroupID.y * 8 + GroupID.x;
	float3 Data = unpack(SourceTexture[DispatchTreadID.xy]);
    int currentValue = int((Data.x + Data.y + Data.z));
    int _;
    InterlockedAdd(SumResult[groupIndex], currentValue, _);

    GroupMemoryBarrierWithGroupSync();

    if (groupIndex == 0)
        return;
	
    if (any(GroupThreadID))
        return;

    InterlockedAdd(SumResult[0], SumResult[groupIndex], _);
	
}